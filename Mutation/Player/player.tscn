[gd_scene load_steps=6 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]
[ext_resource path="res://Player/player.gd" type="Script" id=2]

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform vec4 transparent : hint_color;
uniform vec4 primary_color : hint_color;
uniform vec4 secondary_color : hint_color;

uniform float inner_radius = 0.1;

uniform float inner_threshold = 0.4;
uniform float outer_threshold = 0.15;
uniform float soft_edge = 0.04;

uniform vec2 center = vec2(0.5, 0.8);

uniform int OCTAVES = 6;

float rand(vec2 coord){
	// prevents randomness decreasing from coordinates too large
	coord = mod(coord, 10000.0);
	// returns \"random\" float between 0 and 1
	return fract(sin(dot(coord, vec2(12.9898,78.233))) * 43758.5453);
}


vec2 rand2( vec2 coord ) {
	// prevents randomness decreasing from coordinates too large
	coord = mod(coord, 10000.0);
	// returns \"random\" vec2 with x and y between 0 and 1
    return fract(sin( vec2( dot(coord,vec2(127.1,311.7)), dot(coord,vec2(269.5,183.3)) ) ) * 43758.5453);
}

float perlin_noise(vec2 coord) {
	vec2 i = floor(coord);
	vec2 f = fract(coord);
	
	float t_l = rand(i) * 6.283;
	float t_r = rand(i + vec2(1, 0)) * 6.283;
	float b_l = rand(i + vec2(0, 1)) * 6.283;
	float b_r = rand(i + vec2(1)) * 6.283;
	
	vec2 t_l_vec = vec2(-sin(t_l), cos(t_l));
	vec2 t_r_vec = vec2(-sin(t_r), cos(t_r));
	vec2 b_l_vec = vec2(-sin(b_l), cos(b_l));
	vec2 b_r_vec = vec2(-sin(b_r), cos(b_r));
	
	float t_l_dot = dot(t_l_vec, f);
	float t_r_dot = dot(t_r_vec, f - vec2(1, 0));
	float b_l_dot = dot(b_l_vec, f - vec2(0, 1));
	float b_r_dot = dot(b_r_vec, f - vec2(1));
	
	vec2 cubic = f * f * (3.0 - 2.0 * f);
	
	float top_mix = mix(t_l_dot, t_r_dot, cubic.x);
	float bot_mix = mix(b_l_dot, b_r_dot, cubic.x);
	float whole_mix = mix(top_mix, bot_mix, cubic.y);
	
	return whole_mix + 0.5;
}

void fragment(){
	vec2 coord = UV * 8.0;
	vec3 color = vec3(0.0);
	
	float p_noise_1 = perlin_noise(coord + vec2(TIME * 0.5, TIME * 0.5));
	float p_noise_2 = perlin_noise(coord - vec2(TIME * 0.5, TIME * 0.5));
	float combined_p_noise_1 = (p_noise_1 + p_noise_2) / 2.0;
	
	/*if(distance(UV, vec2(0.5, 0.5)) < inner_radius/2.) {
		if (combined_noise2 > 0.5){
			COLOR = next_color;
		}
		else{
			COLOR = current_color;
		}
	}*/
	
	
	
	if (distance(UV, vec2(0.5, 0.5)) < 0.5){
		COLOR = primary_color;
	}
	
	//else if (){
		
	//}
	
	else{
		COLOR = transparent;
	}
	
}

void vertex() {
	vec2 coord = UV * 8.0;
	
	float p_noise_1 = perlin_noise(coord + vec2(TIME * 10.0, TIME * 2.0));
	float p_noise_2 = perlin_noise(coord - vec2(TIME * 3.0, TIME * 7.5));
	float combined_p_noise_1 = (p_noise_1 + p_noise_2) / 2.0;
	
	if (combined_p_noise_1 > 0.5){
		VERTEX.x += cos(TIME) * 2.0
	}
	else{
		VERTEX.y += sin(TIME) * 2.0
	}
}"
custom_defines = ""

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/transparent = Color( 0, 0, 0, 0 )
shader_param/primary_color = null
shader_param/secondary_color = null
shader_param/inner_radius = 0.1
shader_param/inner_threshold = 0.4
shader_param/outer_threshold = 0.15
shader_param/soft_edge = 0.04
shader_param/center = Vector2( 0.5, 0.8 )
shader_param/OCTAVES = 6

[sub_resource type="CapsuleShape2D" id=2]
radius = 18.1712
height = 31.0332

[node name="Player" type="KinematicBody2D"]
collision_mask = 52
script = ExtResource( 2 )

[node name="AnimatedSprite" type="Sprite" parent="."]
material = SubResource( 4 )
texture = ExtResource( 1 )

[node name="Collider" type="CollisionShape2D" parent="."]
shape = SubResource( 2 )

[node name="WeaponPoint" type="Node2D" parent="."]
position = Vector2( 50, 0 )

[node name="DashCooldown" type="Timer" parent="."]

[node name="ShootCooldown" type="Timer" parent="."]
one_shot = true

[node name="Mutations" type="Node" parent="."]
